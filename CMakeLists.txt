CMAKE_MINIMUM_REQUIRED(VERSION 2.8)
PROJECT(image_dehaze)

SET(TEST true CACHE bool "default build test")
SET(CC_DISABLE_TIMING false CACHE bool "default not test time")

IF(CMAKE_HOST_SYSTEM_NAME STREQUAL "Linux")
    SET(TARGET_OS_LINK_LIBS pthread)
ENDIF()
IF (CMAKE_CXX_COMPILER_ID MATCHES "Clang")
    IF (CMAKE_SYSTEM_NAME MATCHES "Darwin")
        SET(NEWCXX_ENABLED_FLAG "-std=c++11 -stdlib=libc++ -Wall -O2")
    ELSE()
        SET(NEWCXX_ENABLED_FLAG "-std=c++11 -Wall -Wno-mismatched-tags -O2")
    ENDIF()
ELSEIF (CMAKE_CXX_COMPILER_ID MATCHES "GNU")
    SET(NEWCXX_ENABLED_FLAG "-std=c++11 -Wall")
ELSEIF(CMAKE_CXX_COMPILER_ID MATCHES "MSVC")
    SET(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} /Z7")
    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /MP")
    IF(CMAKE_TARGET_ARCH STREQUAL "X86")
        SET(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} /Ob1")
    ENDIF()
ELSE()
    MESSAGE(FATAL_ERROR, "Only GCC and clang is supported for now.")
ENDIF()
ADD_DEFINITIONS(-DSDK_EXPORTS)
SET(CMAKE_CXX_FLAGS ${NEWCXX_ENABLED_FLAG})
MESSAGE(STATUS "CMAKE_CXX_FLAGS=${CMAKE_CXX_FLAGS}")

FILE(GLOB_RECURSE SRC lib_c/*.c)
FILE(GLOB_RECURSE QT_SRC lib_qc/*.cpp)
INCLUDE_DIRECTORIES(include)
INCLUDE_DIRECTORIES(/usr/include/qt4/QtGui)
INCLUDE_DIRECTORIES(/usr/include/qt4)

ADD_LIBRARY(${CMAKE_PROJECT_NAME} SHARED ${SRC} ${QT_SRC})
ADD_LIBRARY(${CMAKE_PROJECT_NAME}_s ${SRC} ${QT_SRC})

SET(INSTALL_DIR ${CMAKE_CURRENT_SOURCE_DIR}/install)
INSTALL(TARGETS ${CMAKE_PROJECT_NAME} DESTINATION ${INSTALL_DIR}/lib)
INSTALL(DIRECTORY include DESTINATION ${INSTALL_DIR}/include)

find_package(Qt4 4.4.3 REQUIRED QtCore QtGui)

ADD_EXECUTABLE(sample_image_dehazing
    ${CMAKE_CURRENT_SOURCE_DIR}/main.cpp)
TARGET_LINK_LIBRARIES(sample_image_dehazing ${CMAKE_PROJECT_NAME}_s QtCore QtGui)